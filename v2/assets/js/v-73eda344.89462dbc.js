"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[254],{846:(s,n,a)=>{a.r(n),a.d(n,{default:()=>x});var l=a(3168);const p=(0,l.uE)('<h1 id="错误处理-errorhandler" tabindex="-1"><a class="header-anchor" href="#错误处理-errorhandler" aria-hidden="true">#</a> 错误处理（ErrorHandler）</h1><p>程序在执行过程中总会遇到一些可预测或者不可预测的异常，如果对这些异常不做处理，可能会导致程序的崩溃，所以我们需要对程序的异常进行捕获并做相应的处理。下面介绍下在使用 Uma 进行开发时有哪些方法可以捕获程序的异常。</p><h2 id="在方法中-try-catch" tabindex="-1"><a class="header-anchor" href="#在方法中-try-catch" aria-hidden="true">#</a> 在方法中 try-catch</h2><p>在需要的地方进行<code>try-catch</code>是开发语言为我们提供的捕获错误方法，我们将可能出错的代码通过<code>try-catch</code>进行包裹，在<code>catch</code>中对异常进行处理。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> { BaseController } </span><span style="color:#FF7B72;">from</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&#39;@umajs/core&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#FF7B72;">export</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">default</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">class</span><span style="color:#FFA657;"> Index </span><span style="color:#FF7B72;">extends</span><span style="color:#FFA657;"> </span><span style="color:#79C0FF;">BaseController</span><span style="color:#FFA657;"> {</span></span>\n<span class="line"><span style="color:#FFA657;">  </span><span style="color:#D2A8FF;">index</span><span style="color:#FFA657;">() </span><span style="color:#C9D1D9;">{</span></span>\n<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">try</span><span style="color:#C9D1D9;"> {</span></span>\n<span class="line"><span style="color:#C9D1D9;">      </span><span style="color:#8B949E;">// ......</span></span>\n<span class="line"><span style="color:#C9D1D9;">      </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">this</span><span style="color:#C9D1D9;">.</span><span style="color:#D2A8FF;">json</span><span style="color:#C9D1D9;">({ code: </span><span style="color:#79C0FF;">100</span><span style="color:#C9D1D9;">, msg: </span><span style="color:#A5D6FF;">&#39;success&#39;</span><span style="color:#C9D1D9;"> })</span></span>\n<span class="line"><span style="color:#C9D1D9;">    } </span><span style="color:#FF7B72;">catch</span><span style="color:#C9D1D9;"> (err) {</span></span>\n<span class="line"><span style="color:#C9D1D9;">      </span><span style="color:#8B949E;">// 出现错误时处理</span></span>\n<span class="line"><span style="color:#C9D1D9;">      </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">this</span><span style="color:#C9D1D9;">.</span><span style="color:#D2A8FF;">json</span><span style="color:#C9D1D9;">({ code: </span><span style="color:#FF7B72;">-</span><span style="color:#79C0FF;">100</span><span style="color:#C9D1D9;">, msg: </span><span style="color:#A5D6FF;">&#39;error&#39;</span><span style="color:#C9D1D9;"> })</span></span>\n<span class="line"><span style="color:#C9D1D9;">    }</span></span>\n<span class="line"><span style="color:#C9D1D9;">  }</span></span>\n<span class="line"><span style="color:#FFA657;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="使用around" tabindex="-1"><a class="header-anchor" href="#使用around" aria-hidden="true">#</a> 使用Around</h2><p>Uma 提供的 Aspect 中，我们可以通过<code>Around</code>来处理异常。</p>',7),e=(0,l.Uk)("在"),o=(0,l.Uk)("AOP"),r=(0,l.Uk)("一节中我们介绍了，当方法执行过程中，Around装饰器传入的函数可以拦截目标函数的执行，我们可以在函数执行过程中通过try,catch捕获异常并且进行统一返回处理。"),c=(0,l.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#8B949E;">// ${URSA_ROOT}/aspect/err.aspect.ts</span></span>\n<span class="line"><span style="color:#8B949E;">// /aspect/method.aspect.ts</span></span>\n<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> { IProceedJoinPoint } </span><span style="color:#FF7B72;">from</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&#39;@umajs/core&#39;</span><span style="color:#C9D1D9;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#FF7B72;">export</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">async</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">function</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">throwErr</span><span style="color:#C9D1D9;">(</span><span style="color:#FFA657;">proceedPoint</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">IProceedJoinPoint</span><span style="color:#C9D1D9;">&lt;</span><span style="color:#79C0FF;">any</span><span style="color:#C9D1D9;">&gt;) {</span></span>\n<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">let</span><span style="color:#C9D1D9;"> result;</span></span>\n<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">try</span><span style="color:#C9D1D9;">{</span></span>\n<span class="line"><span style="color:#C9D1D9;">       </span><span style="color:#8B949E;">// 执行被修饰的方法</span></span>\n<span class="line"><span style="color:#C9D1D9;">      </span><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">result</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">await</span><span style="color:#C9D1D9;"> proceedPoint.</span><span style="color:#D2A8FF;">proceed</span><span style="color:#C9D1D9;">();</span></span>\n<span class="line"><span style="color:#C9D1D9;">    }</span><span style="color:#FF7B72;">catch</span><span style="color:#C9D1D9;">(</span><span style="color:#FFA657;">e</span><span style="color:#FF7B72;">:</span><span style="color:#FFA657;">Error</span><span style="color:#C9D1D9;">){</span></span>\n<span class="line"><span style="color:#C9D1D9;">      </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> Result.</span><span style="color:#D2A8FF;">json</span><span style="color:#C9D1D9;">({code:</span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">,message:</span><span style="color:#A5D6FF;">&#39;执行方法异常！&#39;</span><span style="color:#C9D1D9;">,stack:e.stack})</span></span>\n<span class="line"><span style="color:#C9D1D9;">    }</span></span>\n<span class="line"><span style="color:#C9D1D9;">   </span></span>\n<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> result;</span></span>\n<span class="line"><span style="color:#C9D1D9;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#8B949E;">// ${URSA_ROOT}/controller/index.controller.ts</span></span>\n<span class="line"><span style="color:#FF7B72;">export</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">default</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">class</span><span style="color:#FFA657;"> Index </span><span style="color:#FF7B72;">extends</span><span style="color:#FFA657;">  </span><span style="color:#79C0FF;">BaseController</span><span style="color:#FFA657;"> {</span></span>\n<span class="line"><span style="color:#FFA657;">    </span><span style="color:#8B949E;">// 添加异常处理切面方法，当index执行出错时会执行afterThrowing</span></span>\n<span class="line"><span style="color:#FFA657;">    @</span><span style="color:#D2A8FF;">Around</span><span style="color:#FFA657;">(</span><span style="color:#C9D1D9;">throwErr</span><span style="color:#FFA657;">)</span></span>\n<span class="line"><span style="color:#FFA657;">    </span><span style="color:#D2A8FF;">index</span><span style="color:#FFA657;">() </span><span style="color:#C9D1D9;">{</span></span>\n<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">throw</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">Error</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;error&#39;</span><span style="color:#C9D1D9;">);</span></span>\n<span class="line"><span style="color:#C9D1D9;">    }</span></span>\n<span class="line"><span style="color:#FFA657;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="中间件方式" tabindex="-1"><a class="header-anchor" href="#中间件方式" aria-hidden="true">#</a> 中间件方式</h2>',2),t=(0,l.Uk)("在"),i=(0,l.Uk)("plugin"),y=(0,l.Uk)("中，我们可以通过插件加载全局中间件，而在中间件中我们可以对next中间件进行捕获，因为插件中引入的中间件执行顺序总是在controller函数被调用之前。"),F=(0,l.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#8B949E;">// plugin/error-handler/index.ts</span></span>\n<span class="line"><span style="color:#FF7B72;">export</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">default</span><span style="color:#FFA657;"> (uma</span><span style="color:#FF7B72;">:</span><span style="color:#FFA657;"> Uma, options</span><span style="color:#FF7B72;">:</span><span style="color:#FFA657;"> TView </span><span style="color:#FF7B72;">=</span><span style="color:#FFA657;"> {})</span><span style="color:#FF7B72;">:</span><span style="color:#FFA657;"> Koa.Middleware </span><span style="color:#FF7B72;">=&gt;</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">{</span></span>\n<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">// uma 实例化对象；options 插件配置的 options，等同于 uma.plugin[&#39;error-handler&#39;].options</span></span>\n<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">async</span><span style="color:#C9D1D9;">(</span><span style="color:#FFA657;">ctx</span><span style="color:#C9D1D9;">,</span><span style="color:#FFA657;">next</span><span style="color:#C9D1D9;">)</span><span style="color:#FF7B72;">=&gt;</span><span style="color:#C9D1D9;">{</span></span>\n<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">try</span><span style="color:#C9D1D9;">{</span></span>\n<span class="line"><span style="color:#C9D1D9;">          </span><span style="color:#FF7B72;">await</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">next</span><span style="color:#C9D1D9;">();</span></span>\n<span class="line"><span style="color:#C9D1D9;">        }</span><span style="color:#FF7B72;">catch</span><span style="color:#C9D1D9;">(e){</span></span>\n<span class="line"><span style="color:#C9D1D9;">          console.</span><span style="color:#D2A8FF;">error</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;error-handler插件捕获异常&#39;</span><span style="color:#C9D1D9;">,e);</span></span>\n<span class="line"><span style="color:#C9D1D9;">        }</span></span>\n<span class="line"><span style="color:#C9D1D9;">    };</span></span>\n<span class="line"><span style="color:#C9D1D9;">};</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="使用-plugin-status" tabindex="-1"><a class="header-anchor" href="#使用-plugin-status" aria-hidden="true">#</a> 使用 plugin-status</h2>',2),D=(0,l.Uk)("plugin-status"),u=(0,l.Uk)("是 Uma 为了方便用户对 response"),d=(0,l._)("code",null,"不同状态码",-1),b=(0,l.Uk)("情况和"),m=(0,l._)("code",null,"错误",-1),C=(0,l.Uk)("进行处理提供的插件。"),h=(0,l.Uk)("具体使用方法可以参考"),A=(0,l.Uk)("插件/Status"),B=(0,l.Uk)("一章"),g=(0,l.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#8B949E;">// status.config.ts</span></span>\n<span class="line"><span style="color:#FF7B72;">export</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">default</span><span style="color:#FFA657;"> {</span></span>\n<span class="line"><span style="color:#FFA657;">    </span><span style="color:#8B949E;">// 针对状态码进行处理</span></span>\n<span class="line"><span style="color:#FFA657;">    </span><span style="color:#D2A8FF;">_404</span><span style="color:#FFA657;">(ctx) </span><span style="color:#C9D1D9;">{</span></span>\n<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> ctx.</span><span style="color:#D2A8FF;">render</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;404.html&#39;</span><span style="color:#C9D1D9;">);</span></span>\n<span class="line"><span style="color:#C9D1D9;">    }</span></span>\n<span class="line"><span style="color:#FFA657;">    </span><span style="color:#8B949E;">// 针对未被捕获错误进行处理</span></span>\n<span class="line"><span style="color:#FFA657;">    </span><span style="color:#D2A8FF;">_error</span><span style="color:#FFA657;">(e</span><span style="color:#FF7B72;">:</span><span style="color:#FFA657;"> Error, ctx) </span><span style="color:#C9D1D9;">{</span></span>\n<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">// ...</span></span>\n<span class="line"><span style="color:#C9D1D9;">    }</span></span>\n<span class="line"><span style="color:#FFA657;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="三种错误处理方式的使用场景" tabindex="-1"><a class="header-anchor" href="#三种错误处理方式的使用场景" aria-hidden="true">#</a> 三种错误处理方式的使用场景</h2><ul><li>try-catch: 适合对方法<code>单独</code>进行错误处理</li><li>Around: 更具<code>可复用性</code>，可以对多个方法进行错误处理</li><li>中间件方式: 属于全局异常兜底策略，适用于全局范围内未知异常捕获处理</li><li>plugin-status: 对整个系统在运行中未被捕获的错误的<code>兜底操作</code>，让系统更健壮，同时除了错误处理外，更多的是<code>对不同状态码的统一处理</code></li></ul>',3),E={},x=(0,a(6215).Z)(E,[["render",function(s,n){const a=(0,l.up)("RouterLink");return(0,l.wg)(),(0,l.iD)(l.HY,null,[p,(0,l._)("p",null,[e,(0,l.Wm)(a,{to:"/other/AOP.html#%E9%80%9A%E7%9F%A5"},{default:(0,l.w5)((()=>[o])),_:1}),r]),c,(0,l._)("p",null,[t,(0,l.Wm)(a,{to:"/development/Plugin.html#%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B"},{default:(0,l.w5)((()=>[i])),_:1}),y]),F,(0,l._)("p",null,[(0,l.Wm)(a,{to:"/plugin/Status.html"},{default:(0,l.w5)((()=>[D])),_:1}),u,d,b,m,C]),(0,l._)("p",null,[h,(0,l.Wm)(a,{to:"/plugin/Status.html"},{default:(0,l.w5)((()=>[A])),_:1}),B]),g],64)}]])},5454:(s,n,a)=>{a.r(n),a.d(n,{data:()=>l});const l={key:"v-73eda344",path:"/other/errorHandling.html",title:"错误处理（ErrorHandler）",lang:"zh-CN",frontmatter:{head:[["meta",{property:"og:url",content:"/v2/other/errorHandling.html"}],["meta",{property:"og:site_name",content:"UMajs"}],["meta",{property:"og:title",content:"错误处理（ErrorHandler）"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"og:locale:alternate",content:"en-US"}],["meta",{name:"twitter:card",content:"summary_large_image"}],["meta",{name:"twitter:image:alt",content:"UMajs"}],["meta",{property:"article:author",content:"wuba"}],["meta",{property:"og:restrictions:age",content:"3+"}]]},excerpt:"",headers:[{level:2,title:"在方法中 try-catch",slug:"在方法中-try-catch",children:[]},{level:2,title:"使用Around",slug:"使用around",children:[]},{level:2,title:"中间件方式",slug:"中间件方式",children:[]},{level:2,title:"使用 plugin-status",slug:"使用-plugin-status",children:[]},{level:2,title:"三种错误处理方式的使用场景",slug:"三种错误处理方式的使用场景",children:[]}],filePathRelative:"other/errorHandling.md",git:{updatedTime:1634896538e3,contributors:[{name:"BubbleM",email:"bubblelm@163.com",commits:1},{name:"dazjean",email:"zunyi_zjj@163.com",commits:1}]}}},6215:(s,n)=>{n.Z=(s,n)=>{for(const[a,l]of n)s[a]=l;return s}}}]);